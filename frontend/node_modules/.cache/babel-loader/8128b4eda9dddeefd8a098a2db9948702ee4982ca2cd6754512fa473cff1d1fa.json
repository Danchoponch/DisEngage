{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nadia\\\\Desktop\\\\NYUAD\\\\Brightspace\\\\Junior\\\\Fall\\\\ppds\\\\final_project\\\\frontend_setup\\\\frontend\\\\src\\\\components\\\\CartPage.js\",\n  _s = $RefreshSig$();\n// Event Cart with Overlap Detection:\n// This component displays selected events and checks for any schedule overlaps.\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartPage = () => {\n  _s();\n  const [events, setEvents] = useState([]); // State to hold selected events\n  const [overlap, setOverlap] = useState(false); // State to track schedule overlaps\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/events`); // Fetch events from backend\n        setEvents(response.data); // Store events in state\n\n        const hasOverlap = checkOverlap(response.data); // Check for overlaps\n        setOverlap(hasOverlap); // Update overlap state based on result\n      } catch (error) {\n        console.error(\"Error fetching events:\", error); // Log errors to console\n      }\n    };\n    fetchEvents(); // Fetch events when component loads\n  }, []);\n\n  // Function to detect overlapping schedules\n  const checkOverlap = events => {\n    for (let i = 0; i < events.length; i++) {\n      for (let j = i + 1; j < events.length; j++) {\n        if (events[i].end_time > events[j].start_time && events[i].start_time < events[j].end_time) {\n          return true; // Return true if overlap is detected\n        }\n      }\n    }\n    return false; // Return false if no overlap\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [events.map((event, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: `${event.name} - ${event.start_time} to ${event.end_time}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: overlap ? \"Overlap detected!\" : \"No overlap detected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Review Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(CartPage, \"9G/a+gErz5K/1fUmsBXp+tkMT20=\");\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","CartPage","_s","events","setEvents","overlap","setOverlap","fetchEvents","response","get","process","env","REACT_APP_API_BASE_URL","data","hasOverlap","checkOverlap","error","console","i","length","j","end_time","start_time","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","event","index","name","_c","$RefreshReg$"],"sources":["C:/Users/Nadia/Desktop/NYUAD/Brightspace/Junior/Fall/ppds/final_project/frontend_setup/frontend/src/components/CartPage.js"],"sourcesContent":["// Event Cart with Overlap Detection:\r\n// This component displays selected events and checks for any schedule overlaps.\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CartPage = () => {\r\n  const [events, setEvents] = useState([]); // State to hold selected events\r\n  const [overlap, setOverlap] = useState(false); // State to track schedule overlaps\r\n\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      try {\r\n        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/events`); // Fetch events from backend\r\n        setEvents(response.data); // Store events in state\r\n\r\n        const hasOverlap = checkOverlap(response.data); // Check for overlaps\r\n        setOverlap(hasOverlap); // Update overlap state based on result\r\n      } catch (error) {\r\n        console.error(\"Error fetching events:\", error); // Log errors to console\r\n      }\r\n    };\r\n\r\n    fetchEvents(); // Fetch events when component loads\r\n  }, []);\r\n\r\n  // Function to detect overlapping schedules\r\n  const checkOverlap = (events) => {\r\n    for (let i = 0; i < events.length; i++) {\r\n      for (let j = i + 1; j < events.length; j++) {\r\n        if (\r\n          events[i].end_time > events[j].start_time &&\r\n          events[i].start_time < events[j].end_time\r\n        ) {\r\n          return true; // Return true if overlap is detected\r\n        }\r\n      }\r\n    }\r\n    return false; // Return false if no overlap\r\n  };\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <h3>Your Cart</h3>\r\n      <ul>\r\n        {events.map((event, index) => (\r\n          <li key={index}>{`${event.name} - ${event.start_time} to ${event.end_time}`}</li>\r\n        ))} {/* Render each event */}\r\n      </ul>\r\n      <p>{overlap ? \"Overlap detected!\" : \"No overlap detected\"}</p> {/* Display overlap status */}\r\n      <button>Review Schedule</button> {/* Button to proceed to schedule review */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}